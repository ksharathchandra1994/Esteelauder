Cucumber:
Cucumber is a tool that supports Behaviour-Driven Development(BDD). BDD aims to narrow the communication gaps between Business Analysts, Developers, Testers,Stack holders, client it lets us define application behavior in plain meaningful English text using a Gherkin language. Cucumber itself is written in Ruby, but it can be used to “test” code written in Ruby or other languages including but not limited to Java, C# and Python.

------------------------------------------------------------------------------------------------------------------------------------------------------
-->cucumber BDD framework can be used in UNIT level testing.
-->And also in Web-services
-->Alternate to cucumber is Jbehave, since it os complex to us it is not popular
------------------------------------------------------------------------------------------------------------------------------------------------------
Installation:
	*Create the Maven Project
	*In POM.xml file, declare below dependencies (https://github.com/naveenanimation20/CucumberSeleniumFramework/blob/master/pom.xml)
			-->Cucumber - java - s
			-->Cucumber - JVM - s 
			-->Cucumber - JVM - Deps - s
			-->Cucumber - Junit - s
			-->	Cucumber - Reporting - s 
			-->Gherkin - s 
			-->Junit - s 
			-->Selenium - s 
			-->Browser driver 
			-->For maven, Maven plugin and Maven surefire plug in 
	NOte:
		*We need to download the Natural plug-in from Eclipse market place
		*If it is not present in market place than we need to navigate to https://marketplace.eclipse.org/content/natural page and drag and drop in to Eclipse
		*Natural is Gherkin plug in to eclipse to support the feature file
		
------------------------------------------------------------------------------------------------------------------------------------------------------
1.in cucumber we develop the 3 files 
	*.feature files
	*Step definition file 
	*Runner Class
	
------------------------------------------------------------------------------------------------------------------------------------------------------

Step#1_Feature File: The purpose of the Feature keyword is to provide a high-level description of a software feature, and to group related scenarios.
	*The first primary keyword in a Gherkin document must always be Feature, followed by a : and a short text that describes the feature.
	*it is a.feature file
	*In this feature file we use Gherkin keywords (Feature, When, Given, Then, As, But, *) to create Scenario(Scenario outline) for a specific feature
	*All test case steps are defined by (When, Given, Then, As, But, *)
	*Scenario is defined by Scenario or Scenario Outline
	*Feature keyword is used to specify the Feature name (Checkout, Login, MyAccount)
	*To comment a line we use #
		1.The primary keywords are:

			Feature
			Rule (as of Gherkin 6)
			Example (or Scenario)
			Given, When, Then, And, But (steps)
			Background:
			Scenario Outline (or Scenario Template)
			Examples
		2.There are a few secondary keywords as well:

			""" (Doc Strings)
			| (Data Tables)
			@ (Tags)
			# (Comments)
	
Step#2_Step Definition File:
	*In this we Selenium code + JAVA + different Annotations

Step#3_Test Runner Class:
	*Test Runner class is responsible for to run all cucumber test scripts and to generate the reports
	*To run Feature we use test runner class
	*Test runner class is written in Junit
	*To generate output/reports
Note:
https://docs.cucumber.io/gherkin/reference/#keywords
------------------------------------------------------------------------------------------------------------------------------------------------------
Cucumber Options:The below options (Except Tags)are defined in Runner Class 
	*Dry Runner
	*Feature
	*Glue
	*Tags(Defined in Feature file)
	*Monochrome
	*Formate 
	*Strict 
	*Plugin 
	
#1_Dry Run:If we want to check that each step inside scenario is having step definition (In project a scenario can have many steps, some times we may miss to define step definition for step, Always batter to do dry run to check Steps and step definition mapped properly or not)
	
	*In cucumber options we give dryRun= true
	
#2_Feature:Path of the feature file
	*We can give full path of multiple feature files
	*We can give folder/Package path

#3_Glue:Path of the Step Definition file
	*We can give folder/Package path

#4_Monochrome:Display the console output in readable formate

#5_Formate:is used to generate different types of reporting/Output, We can generate below types of reports
	
	*HTML Formate
	*Json( By using this file we can develop customized report )
	*Junit
	
#6_Strict:It fails the execution if there are any steps( Pending or undefined steps are there in feature file ) definition files are missing 
	*If dryRun = false and strict = true, Let say in Scenario 5 steps are there and 4 out of 5 steps have step definition files and one of that not have step definition file
	*If we run test script, Script will execute but result will be failed even though reaming steps got passed
	*It will generate snippet to define step definition file 

Example:	
	@RunWith(Cucumber.class)
	@CucumberOptions(
			features = "/Users/NaveenKhunteta/Documents/workspace/FreeCrmBDDFramework/src/main/java/Features/taggedhooks.feature", //the path of the feature files
			
			glue={"stepDefinitions"}, //the path of the step definition files
			
			format= {"pretty","html:test-outout", "json:json_output/cucumber.json", "junit:junit_xml/cucumber.xml"}, //to generate different types of reporting
			
			monochrome = true, //display the console output in a proper readable format
			
			strict = true, //it will check if any step is not defined in step definition file
			
			dryRun = false //to check the mapping is proper between feature file and step def file			
			)
	 
	public class TestRunner {
	 
	}

#7_Plugin: also used to generate the report
	*We want text report we use  "rerun:test-outout/textReport.txt"
------------------------------------------------------------------------------------------------------------------------------------------------------
Data Driven Testing:
	*Simple data driven - without Examples keyword
	*With examples + Scenario outline
	*Using Tables
	
#1_Simple data driven( without Examples keyword )
	*Go to feature file
	*If the step is User enters User name and Password 
	*Make step as User enters "csstester114@gmail.com" and "123456"
	*We need to make sure that we are passing arguments to step definition file
	*For that we need to put regular expression @Than("^User enters \"(.*)\" and \"(.*)\" $")
	*Here we can use one more regaler expression \"([^\"]*)\"
	*We need to catch those two parameters in method with String data type
		*Public void User_Enters_UserName_and_Password(String username, String password)
	*We do dry run to check changes are working fine or not
	*We can pass n number of arguments, to catch arguments we need to user n number of regular expression in step definition file and in method we need to catch arguments with n number of parameters
Note:If we are using without Examples keyword, Scenario keyword should be used

#2_Examples keyword:In this case Scenario Outline should be used to define the scenario
	*To pass data we use <>
	*Immediately after steps we have to use Examples keyword and Colan : to enter data
	*To mention columns Pipe | special character is used
	*We need to make sure that we are passing arguments to step definition file
	*For that we need to put regular expression @Than("^User enters \"(.*)\" and \"(.*)\" $")
	*Here we can use one more regaler expression \"([^\"]*)\"
	*We need to catch those two parameters in method with String data type
		*Public void User_Enters_UserName_and_Password(String username, String password)
	*We do dry run to check changes are working fine or not
	*We can pass n number of arguments, to catch arguments we need to user n number of regular expression in step definition file and in method we need to catch arguments with n number of parameters
	
	Examples:
	| username | password | firstname | lastname | position |
	| naveenk  | test@123 | Tom 	  | Peter    | Manager  |
	| naveenk  | test@123 | David 	  | Dsouza   | Director |

	Note:
	1.New browser will launch for each example with different set of data that means the number of browsers are launched equals to number of examples (rows)
	2.IF steps are same and passing different data frame example than we get error(matches than one step definition) so steps should be unique
		Then User enters <Username> and <Password>
		Then User enters <FirstName> and <SecondName>
	3.Scenario outline is used only with Examples Keyword
	4.If we declare data with Examples,The data is applicable for entire test case

#3_Data Tables:(Ctrl+shift+f to do proper formating )
	*We create the test data table next to step with help of Pipe line |
	*Here we do not declare any columns
	*We write only pipe separated value
	*The table is applicable to only one step
	*In step definition file no need to use regular expression and parameters in methods to catch data
	*We need to declare " DataTable table " as parameter --> it is class in cucumber
	*We have to initialize DataTabke with raw() method
			*List <List<String>> data = table.raw(); -->It returns the list of list Strings,List class present in java.Util
			*We can get data with help of data.get(index).get(index) -->Here first index of column, 2nd one is index of row
	*This type of table is used when data is specific to Step
	
	Feature: Deal data creation

    Scenario: Free CRM Create a new deal scenario

	Given user is already on Login Page
	When title of login page is Free CRM
	Then user enters username and password
	| naveenk | test@123 |

	Then user clicks on login button
	Then user is on home page
	Then user moves to new deal page
	Then user enters deal details
	| test deal | 1000 | 50 | 10 |

	Then Close the browser
	
	
	Step Definition
	
	@Then("^user enters username and password$")
	 public void user_enters_username_and_password(DataTable credentials){
		List<List<String>> data = credentials.raw();
	 driver.findElement(By.name("username")).sendKeys(data.get(0).get(0));
	 driver.findElement(By.name("password")).sendKeys(data.get(0).get(1));
	 }
	 
	 @Then("^user enters deal details$")
	 public void user_enters_contacts_details(DataTable dealData){
		 List<List<String>> dealValues =  dealData.raw();
		 driver.findElement(By.id("title")).sendKeys(dealValues.get(0).get(0));
		 driver.findElement(By.id("amount")).sendKeys(dealValues.get(0).get(1));
		 driver.findElement(By.id("probability")).sendKeys(dealValues.get(0).get(2));
		 driver.findElement(By.id("commission")).sendKeys(dealValues.get(0).get(3));
	 }

Note:
*We don't use test data table mostly, We always prefer Scenario Outline

#4_Data driven with MAPS:
	*In report and feature file its not readable that we can't understand what kind of data we passing because in test date table we don't mention any header or column
	*To make it more approachable & more readable formate  with different set of data we write columns names 
	*instead of using dealData.raw() we use dealData.asMaps(keyType, ValueType); -->Here KeyType & ValueType means data type
		@Map<String,String> dealValues = (Map<String,String>)dealData.asMaps(String.class, String.class) - returns the map object 
		

-----------------------------------------------------------------------------------------------------------------------------------------------------
1.How do you achieve data driven testing in cucumber frame work ..?
ANS:We can achieve data driven testing with help of Scenario out line, With examples & with out examples keyword

2.What is difference between Scenario and Scenario Outline
ANS:When ever we use data driven approach with examples keyword it Scenario becomes Scenario outline 
	When ever we use data driven approach with out examples keyword it Scenario becomes Scenario 

3.Hod do you crate Test Data with out Scenario outline and Examples Keyword
ANS:By using test data table next to Step

4.How can you parameterize your test cases
ANS:By using Maps concept in test data table 

-----------------------------------------------------------------------------------------------------------------------------------------------------
Tags: 
	*before Scenario simply we add tag with @ 
			@Smoketest
		--> Scenario: Free CRM Create a new deal scenario
	*The same way we can add tad to feature file as well 
	*After giving taging go to TestRunner class
	*To mention tags in TestRunner class we use tags keyword Feature: Test Tagged Hooks 

    @RunWith(Cucumber.class)
	@CucumberOptions(
			features = "/Users/NaveenKhunteta/Documents/workspace/FreeCrmBDDFramework/src/main/java/Features/taggedhooks.feature", //the path of the feature files
			glue={"stepDefinitions"}, //the path of the step definition files
			format= {"pretty","html:test-outout", "json:json_output/cucumber.json", "junit:junit_xml/cucumber.xml"}, //to generate different types of reporting
			monochrome = true, //display the console output in a proper readable format
			strict = true, //it will check if any step is not defined in step definition file
			dryRun = false //to check the mapping is proper between feature file and step def file
			tags = {"~@SmokeTest" , "~@RegressionTest", "~@End2End"}			
			)
	
	Note:
	-->ORed : tags = {"@SmokeTest , @RegressionTest"} -- execute all tests tagged as @SmokeTest OR @RegressionTest
	-->ANDed : tags = {"@SmokeTest" , "@RegressionTest"} -- execute all tests tagged as @SmokeTest AND @RegressionTest
	-->To ignore specific test case we use before @ " ~ " character tags = {"~@SmokeTest" , "@RegressionTest"} -->In this case only regression tagged cases will be executed
	-->tags = {"~@SmokeTest" , "~@RegressionTest"}--> In this case other than SmokeTest & RegressionTest tagged cases will be executed
	-->If we ignore all tagged cases with ~ in TestRunner Class, The scenarios will be executed which are not tagged

-----------------------------------------------------------------------------------------------------------------------------------------------------CHooks:
	*Go to Step definition file and write @before to launch the browser and @After to close browser -->These methods should be imported from Cucumber API
	*@Before method will be executed before Scenario and @After method will be executed after the Scenario
	*In Case of Examples keyword for each set of data the @Before method will be executed and @After method will be executed
	
Tagged Hooks:If we want to execute something specific to scenario(Precondition) than we use tagged hooks 
	*We can create global Hook which will be applicable for each Scenario Ex:@Before to open Browser & @After to Close Browser 
	*If we want do precondition for specific step (The condition is applicable for only specific step) those are called Tagged Hooks
	
	@Before("@First") -->Applicable to only 1st Scenario and executed before 1st Scenario
	public void beforeFirst(){
		System.out.println("before only first scenario");
	}
	
	@After("@First") -->Applicable to only 1st Scenario and executed After 1st Scenario
	public void afterFirst(){
		System.out.println("after only first sceanrio");
	}
	
	@Before("@Second") -->Applicable to only 2nd Scenario and executed before 2nd Scenario
	public void beforeSecond(){
		System.out.println("before only second scenario");
	}
	
	@After("@Second") -->Applicable to only 2nd Scenario and executed After 2nd Scenario
	public void afterSecond(){
		System.out.println("after only second sceanrio");
	}
	
	@Before("@Third") -->Applicable to only 3rd Scenario and executed before 3rd Scenario
	public void beforeThird(){
		System.out.println("before only third scenario");
	}
	
	@After("@Third") -->Applicable to only 3rd Scenario and executed After 3rd Scenario
	public void afterThird(){
		System.out.println("after only third sceanrio");
	}
	
#1GlobelHooks_Order:
	*We can have multiple Global Hooks, To control order of execution of Global hooks we use Order concept
	
	@Before(order=0)
	public void setUP(){
		System.out.println("launch FF");
		System.out.println("Enter URL for Free CRM APP");
	}

	@After(order=0)
	public void tearDown(){
		System.out.println("close the browser");
	}
	
	@Before(order=1)
	public void setUP1(){
		System.out.println("launch FF");
		System.out.println("Enter URL for Free CRM APP");
	}

	@After(order=1)
	public void tearDown1(){
		System.out.println("close the browser");
	}
	
------------------------------------------------------------------------------------------------------------------------------------------------------
Cucumber with TestNG:
	*To integrate TestNg we required below dependencies  
		*Cucumber JVM : TestNg (1.2.5)
		*TestNg (6.9.10) -->both are compatible
		*The Runner class should extend AbstractTestNGCucumberTests
------------------------------------------------------------------------------------------------------------------------------------------------------
Extent reports:
	<!-- 1st is for Cucumber Extent advance Reporting -->
 		<dependency>
   			 <groupId>com.vimalselvam</groupId>
    		 <artifactId>cucumber-extentsreport</artifactId>
    		 <version>2.0.2</version>
		</dependency>
		<dependency>
    		<groupId>com.relevantcodes</groupId>
    		<artifactId>extentreports</artifactId>
    		<version>2.41.2</version>
		</dependency>
		<dependency>
    		<groupId>com.aventstack</groupId>
   			<artifactId>extentreports</artifactId>
    		<version>3.0.3</version>
		</dependency>
		
------------------------------------------------------------------------------------------------------------------------------------------------------		
Tutorials:
https://www.axelerant.com/resources/team-blog/setup-for-selenium-with-cucumber-using-maven
________________________________________________________________________________________________________________________________________________________________________________________

Cucumber Installation With TestNG:

1.Dependencies required 
	*cucumber-java from info.cukes (Header in Maven repository 'Cucumber JVM - JAVA') - 1.2.5
	*cucumber-testng from info.cukes - 1.2.5
	*Selenium JAVA - 3.11.0
	*cucumber reporing from net.masterthought - 3.8.0
	*maven resources plugin 
	*Maven Surefire plugin 
	*Maven cucumber reporting
2.Once we mention all the dependencies in POM perform maven install
3.Then update the project (Maven -->Update Project)

	<configuration>
					<testFailureIgnore>true </testFailureIgnore>
					<suiteXmlFiles>
						<!-- src/test/resources/testSuites/testng.xml -->
						<suiteXmlFile>testNg.xml</suiteXmlFile>
					</suiteXmlFiles>
				</configuration>
	
---------------------------------